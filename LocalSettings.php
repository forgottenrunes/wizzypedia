<?php
# This file was automatically generated by the MediaWiki 1.38.1
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See docs/Configuration.md for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}


## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "wizzypedia";
$wgMetaNamespace = "Wizzypedia";

$wgShowExceptionDetails = true;

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "";

## The protocol and server name to use in fully-qualified URLs
$wgServer = "https://wizzypedia.forgottenrunes.com";

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

## The URL paths to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogos = [
	'1x' => "$wgResourceBasePath/resources/assets/square-logo.png",
	
	
	'icon' => "$wgResourceBasePath/resources/assets/change-your-logo-icon.svg",
];

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "maguswazir@gmail.com";
$wgPasswordSender = "maguswazir@gmail.com";

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = false;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = getenv("DB_SERVER");
$wgDBname = getenv("DB_NAME");
$wgDBuser = getenv("DB_USER");
$wgDBpassword = getenv("DB_PASS");

# MySQL specific settings
$wgDBprefix = "";

# CRITICAL: Limit connection pool for JawsDB
$wgDBservers = [
    [
        'host' => getenv("DB_SERVER"),
        'dbname' => getenv("DB_NAME"),
        'user' => getenv("DB_USER"),
        'password' => getenv("DB_PASS"),
        'type' => 'mysql',
        'flags' => DBO_DEFAULT,
        'max lag' => 30,
        'max threads' => 5,  # Limit concurrent connections per process
    ],
];

# Connection pool settings
$wgDBConnectionTimeout = 3;  # Timeout faster to free connections
$wgDBTransactionTimeout = 5;  # Kill long transactions

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Shared database table
# This has no effect unless $wgSharedDB is also set.
$wgSharedTables[] = "actor";

## Database Connection Optimization for JawsDB (150 connections)
# DISABLE persistent connections - they can cause connection hoarding
$wgDBpersistent = false;
$wgDBmysql5 = true;

# Connection pooling settings
$wgDBerrorLog = true;  # Enable logging to debug connection issues
$wgDBconnectionError = true;

# Aggressive connection management
$wgMaxShellMemory = 307200;  # Limit shell memory
$wgMaxShellFileSize = 102400;  # Limit shell operations
$wgMaxShellTime = 30;  # Timeout shell operations
$wgMaxShellWallClockTime = 30;

## Shared memory settings - CRITICAL FOR REDUCING DB LOAD
# Use APCu if available (common on Heroku)
if ( function_exists( 'apcu_fetch' ) ) {
    $wgMainCacheType = CACHE_ACCEL;
    $wgMessageCacheType = CACHE_ACCEL;
    $wgParserCacheType = CACHE_ACCEL;
    $wgSessionCacheType = CACHE_ACCEL;
} else {
    # Fallback to DB caching (better than CACHE_NONE)
    $wgMainCacheType = CACHE_DB;
    $wgMessageCacheType = CACHE_DB;
    $wgParserCacheType = CACHE_DB;
    $wgSessionCacheType = CACHE_DB;
}

$wgMemCachedServers = [];

# Session handling optimization
$wgSessionsInObjectCache = true;

# Parser cache settings to reduce DB queries
$wgParserCacheExpireTime = 86400; # 24 hours
$wgEnableParserCache = true;

# Disable ALL background operations on page requests
$wgJobRunRate = 0;
$wgRunJobsAsync = false;  # Never run jobs async
$wgJobTypeConf = [
    'default' => [
        'class' => 'JobQueueDB',
        'order' => 'fifo',
        'claimTTL' => 300,  # 5 minutes claim timeout
    ],
];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

$wgFileExtensions = array( 'png', 'gif', 'jpg', 'jpeg');

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = false;

# Site language code, should be one of the list in ./languages/data/Names.php
$wgLanguageCode = "en";

# Time zone
$wgLocaltimezone = "UTC";

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
#$wgCacheDirectory = "$IP/cache";

$wgSecretKey = getenv("SECRET_KEY");

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = getenv("UPGRADE_KEY");

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

wfLoadSkin( 'Vector' );
$wgDefaultSkin = 'vector';





$wgFavicon = $wgScriptPath . "/resources/assets/favicon.png";

$wgAllowExternalImages = true;

## https://www.mediawiki.org/wiki/Manual:$wgMaxAnimatedGifArea
$wgMaxAnimatedGifArea = 1000000000;
    
wfLoadExtension( 'AWS' );

// Configure AWS credentials.
// THIS IS NOT NEEDED if your EC2 instance has an IAM instance profile.
$wgAWSCredentials = [
	'key' => getenv("S3_KEY"),
	'secret' => getenv("S3_SECRET"),
	'token' => false
];

$wgAWSRegion = 'us-east-1'; # Northern Virginia

// Replace <something> with the name of your S3 bucket, e.g. wonderfulbali234.
$wgAWSBucketName = getenv("S3_NAME");

// If you anticipate using several hundred buckets, one per wiki, then it's probably better to use one bucket
// with the top level subdirectory as the wiki's name, and permissions properly configured of course.
// While there are no more performance losses by using such a scheme, it might make things messy. Hence, it's
// still a good idea to use one bucket per wiki unless you are approaching your 1,000 bucket per account limit.
// $wgAWSBucketTopSubdirectory = "/$wgDBname"; # leading slash is required
$wgAWSBucketTopSubdirectory = "/ttqfd9eooxmdfdav"; # leading slash is required

//Extensions (we should move this into one big array at some point)
wfLoadExtension( 'VisualEditor' );
wfLoadExtension( 'TemplateStyles' );
wfLoadExtension( 'UploadWizard' );
wfLoadExtension( 'Scribunto' );
wfLoadExtension( 'Cargo' );
wfLoadExtension( 'DataTransfer' );
wfLoadExtension( 'PageForms' );
wfLoadExtension( 'ParserFunctions' );
$wgPFEnableStringFunctions = true;
wfLoadExtension( 'Poem' );
wfLoadExtension( 'Nuke' );
wfLoadExtension( 'WikiEditor' );
wfLoadExtension( 'CodeEditor' );
$wgDefaultUserOptions['usebetatoolbar'] = 1;
wfLoadExtension( 'ImageMap' );
// wfLoadExtension( 'ConfirmAccount' );
// $wgGroupPermissions['*']['createaccount'] = false;
// $wgGroupPermissions['bureaucrat']['createaccount'] = true;
// $wgGroupPermissions['sysop']['createaccount'] = true;
// $wgConfirmAccountRequestFormItems = [
// 	'UserName'        => [ 'enabled' => true ],
// 	'RealName'        => [ 'enabled' => false ],
// 	'Biography'       => [ 'enabled' => false, 'minWords' => 50 ],
// 	'AreasOfInterest' => [ 'enabled' => false ],
// 	'CV'              => [ 'enabled' => false ],
// 	'Notes'           => [ 'enabled' => true ],
// 	'Links'           => [ 'enabled' => false ],
// 	'TermsOfService'  => [ 'enabled' => false ],
// ];
wfLoadExtension( 'TwitterTag' );
wfLoadExtension( 'AutoSitemap' );

$wgAutoSitemap["notify"] = [
    'https://www.google.com/webmasters/sitemaps/ping?sitemap=https://wizzypedia.forgottenrunes.com/sitemap.xml',
];

$wgAutoSitemap["priority"] = 0.5;

// Enable Popups extension
wfLoadExtensions( [
    'TextExtracts',
    'PageImages',
    'Popups'
] );
$wgPopupsHideOptInOnPreferencesPage = true;

$wgScribuntoDefaultEngine = 'luastandalone';
//$wgScribuntoEngineConf['luastandalone']['luaPath'] = '/app/extensions/Scribunto/includes/engines/LuaStandalone/binaries/lua5_1_5_linux_64_generic/lua';


# End of automatically generated settings.
# Add more configuration options below.


$wgUploadWizardConfig = [
	'tutorial' => [
	 	'skip' => true
	], // Skip the tutorial
	'defaults' => [
		// Initial value for the description field.
		'description' => 'Uploaded by UploadWizard'
	]
];

// Group permissions
// Anonymous users can't create pages or edit pages
$wgGroupPermissions['*']['createpage'] = false;
$wgGroupPermissions['*']['edit'] = false;

$wgArticlePath = "/$1";

// https://phabricator.wikimedia.org/T310013
$wgShowEXIF = function_exists( 'exif_read_data' );


// Custom page protection
$wgGroupPermissions['barren-group'] = $wgGroupPermissions['autoconfirmed'];
# add an additional protection level restricting edit/move/etc. to users with the "barren" permission
$wgRestrictionLevels[] = 'barren'; 
# give the "barren" permission to users in the "barren-group" group
$wgGroupPermissions['barren-group']['barren'] = true;
# give the "barren" permission to sysops (needed so sysops can apply this protection level to pages)
$wgGroupPermissions['sysop']['barren'] = true;

$wgGroupPermissions['*']['createaccount'] = false;

## Additional Database Optimization for JawsDB Connection Limits
# Reduce the number of database queries
$wgMiserMode = true; # Enables various performance optimizations

# Disable some features that require many DB queries
$wgDisableCounters = true; # Disable page view counters
$wgDisableInternalSearch = false; # Keep internal search enabled but optimize it

# Cache expiry settings
$wgCacheEpoch = '20230101000000'; # Invalidate cache if needed
$wgStyleVersion = '303'; # Increment to invalidate cached CSS/JS

# Optimize file cache for anonymous users
$wgUseFileCache = true;
$wgFileCacheDirectory = "$IP/cache/html";
$wgShowIPinHeader = false;

# Resource loader optimization
$wgResourceLoaderMaxage = [
    'versioned' => 30 * 24 * 60 * 60, // 30 days
    'unversioned' => 5 * 60 // 5 minutes
];

# Reduce expensive parser function calls
$wgExpensiveParserFunctionLimit = 100;

# Database query optimization
$wgAntiLockFlags = ALF_NO_LINK_LOCK | ALF_NO_BLOCK_LOCK;

# Enable HTTP caching
$wgUseSquid = true;
$wgUsePrivateIPs = true;

## AGGRESSIVE CONNECTION MANAGEMENT FOR 150+ CONNECTION ISSUES
# Reduce connection timeout to free up stale connections faster
ini_set('mysql.connect_timeout', 3);
ini_set('default_socket_timeout', 3);

# Limit PHP execution to prevent long-running scripts
set_time_limit(30);

# Disable features that create multiple connections
$wgEnableUserEmail = false;  # Disable email features temporarily
$wgEnotifUserTalk = false;
$wgEnotifWatchlist = false;

# Use single database connection for all operations
$wgDBssl = false;  # SSL can cause connection overhead
$wgDBcompress = false;  # Compression can keep connections open longer

# Aggressive query limits
$wgAPIMaxDBRows = 500;  # Limit API database queries
$wgFeedLimit = 20;  # Limit RSS feed queries
$wgQueryCacheLimit = 100;  # Limit query cache

# Disable expensive operations
$wgAllowSlowParserFunctions = false;
$wgExpensiveParserFunctionLimit = 50;  # Reduced from 100
$wgAllowExternalImages = false;  # External images can cause connection issues

# Connection pooling hack - force connection reuse
$wgDBconnection = null;  # Force new connections to close
$wgDBtrxLevel = 0;  # No nested transactions
